# -*- coding: utf-8 -*-
"""match_and_format_locs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KoW4THl3l7rOwvrLhWPa_JerXgjMh1ge
"""

#April 15, 2021
#nmoisseeva@eoas.ubc.ca
#This code re-formats original BSF fire_locations.csv into BSP format:
# - adjusting timestamp format
# - removing duplicates, due to replacement of 'persistance' module in BSP
# - plots map of excluded plumes (those >0.1degree away from MISR location)

import numpy as np
from sklearn.neighbors import KDTree
import pandas as pd
from os import path
import folium
import glob
from datetime import datetime
import csv

#==============INPUT==================
# misr_data = '/content/drive/Shareddrives/Research/FireSmoke/BlueSky_Emissions/misr_plumes.csv'
misr_data = '/content/drive/MyDrive/misr_xval/misr_plumes.csv'
emissions_path = '/content/drive/Shareddrives/Research/FireSmoke/BlueSky_Emissions/original_runs/'    #path to directory with emissions files here
formatted_path = '/content/drive/Shareddrives/Research/FireSmoke/BlueSky_Emissions/reruns/fire_locations_formatted/' #place to put reformatted runs
#=====================================

#read MISR data, sort
misr = pd.read_csv(misr_data,parse_dates=['Datetime'])
misr.sort_values('Datetime',ignore_index=True, inplace=True)

#setup display map
cm = folium.Map(location=[55,-95], zoom_start=4,control_scale = True)

#loop through all fires
for iF, fire in misr.iterrows():
  
  #find the file from the correct date
  bluesky_file = emissions_path + 'bsc-fires-emissions-' + fire.Datetime.strftime('%Y%m%d') + '-08/fire_locations.csv'

  #if the file doesn't exist skip
  if not path.exists(bluesky_file):
    print('Missing locations file: %s' %bluesky_file)
    continue

  #read in the csv file
  bluesky_data = pd.read_csv(bluesky_file)
  # print('Processing data: %s' %bluesky_file)

  #find closest lat, lon (kd-tree) to the fire (not looking at time yet, just location)
  bluesky_locs = pd.DataFrame({'Lat': bluesky_data['latitude'].values.ravel(), 'Lon': bluesky_data['longitude'].values.ravel()})
  misr_loc = np.array([fire.Lat, fire.Lon]).reshape(1,-1)
  tree = KDTree(bluesky_locs)
  dist, idx = tree.query(misr_loc, k=1) 
  
  #sanity check: make sure the point is not too far, e.g. dist < 0.1 degree lat
  if dist > 0.1:
    print('...closest emissions location is too far') #flat this or figure out why!
    folium.Marker(location=bluesky_locs.iloc[idx[0]].values[0],popup='BS'+ fire.Datetime.strftime('%Y%m%d'), icon = folium.Icon(color='blue',icon='map-marker')).add_to(cm)
    folium.Marker(location = np.array([fire.Lat, fire.Lon]),popup = 'MISR' + fire.Datetime.strftime('%Y%m%d'), icon = folium.Icon(icon='facetime-video',color='red')).add_to(cm)
    continue
    
  # folium.Marker(location=bluesky_locs.iloc[idx[0]].values[0],popup='BS'+ fire.Datetime.strftime('%Y%m%d'), icon = folium.Icon(color='blue',icon='map-marker')).add_to(cm)
  # folium.Marker(location = np.array([fire.Lat, fire.Lon]),popup = 'MISR' + fire.Datetime.strftime('%Y%m%d'), icon = folium.Icon(icon='facetime-video',color='red')).add_to(cm)

  #re-format fire_locations.csv for input into BSP -------------------------------
  #copy existing dataframe, removing duplicates created by BSF "persistance"
  clean_copy = bluesky_data.copy()
  clean_copy.drop_duplicates(subset=['latitude','longitude'], inplace=True)

  #reformat dates to BSP format
  clean_copy['date_time'] = pd.to_datetime(clean_copy.date_time, format='%Y%m%d%H%M%z')
  clean_copy['date_time'] = clean_copy['date_time'].apply(lambda x: x.strftime('%Y-%m-%dT%H:%M:%S.000%z'))
  clean_copy['date_time'] = clean_copy['date_time'].apply(lambda x: x[:-2] + ':' + x[-2:])

  #save new copy
  clean_path = formatted_path + 'fire_locations_' + fire.Datetime.strftime('%Y%m%d') + '.csv'
  clean_copy.to_csv(clean_path,index=False)
  print('Saving formatted data to %s' %clean_path)

cm